sapply(flag_colors,mean)
flay_shapes<- flags[,19:23]
flag_shapes<- flags[,19:23]
play()
range(flag_shapes)
?range
nxt()
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <-sapply(flag_shapes,range)
shape_mat
class(flat_mat)
class(flag_mat)
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(unique_vals,unique)
sapply(flags,unique)
play()
unique_vals
nxt()
lapply(unique_vals,function(elem)elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
play()
head(plants)
nxt()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
objex
object.size(plants)
inside.name(plants)
name(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = !TRUE)
sample(1:20, 10, replace = FAIL)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1),2,replace=TRUE,prob=c(0.3,0.7))
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size = 100,prob = 0.7)
flips2 <- rbinom(1,size = 100,prob = 0.7)
flips2 <- rbinom(c(0,1),size = 100,prob =c(0.3,0.7))
flips2 <- rbinom(n=100,size=1,prob=0.7)
flips2
sum(flips2)
rnorm
rnorm()
?rnorm
rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5)
rpois(5,10)
replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
cm
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXct(Sys.time())
t2 <-as.POSIXct(Sys.time())
t2 <-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3,"%B %d,%y    %H:%M")
strptime(t3,"%B %d,%y %H:%M")
strptime(t3,"%B %d,%Y %H:%M")
strptime(t3,"%B %d, %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),ti,units = 'days')
difftime(Sys.time(),t1,units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x=cars$speed,y=cars$dist)
plot(x=cars$speed,y=cars$dist,xlav="Speed")
plot(x=cars$speed,y=cars$dist,xlab ="Speed")
plot(x=cars$speed,y=cars$dist,xlab ="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab ="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab ="Speed",xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab ="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab ="Speed",ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,main="My Plot",sub = "My Plot Subtitle")
plot(cars,sub = "My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim =(c(10,15)))
plot(cars,xlim =c(10,15))
plot(cars,pch=2)
data(mtcars)
play()
str(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(mtcars,mpg~cyl)
boxplot(formula = mpg~cyl,data=mtcars)
hist(mtcars$mpg)
swirl::install_course("The R Programming Environment")
install.packages("swirl")
library("swirl")
swirl()
swirl::install_course("The R Programming Environment")
library("The R Programming Environment")
swirl()
bye()
library("swirl")
swirl()
5+7
main()
main()
library(readr)
datapath
print(datapath)
datafile <- file.path()
datafile <- file.path(datapath, "urban.csv.gz")
urban <- read.csv(datapath)
urban <- read.csv(urban.csv.gz)
urban <- read_csv(urban.csv.gz)
urban <- read_csv(datafile)
head(urban data)
head(urban)
urban <- read_csv(datafile,col_types = char)
urban <- read_csv(datafile,col_types = character)
urban <- read_csv(datafile,col_types = c(chr,chr,chr,db1,chr))
urban <- read_csv(datafile,col_types = c(chracter,chracter,chracter,db1,chracter))
?read_csv
urban <- read_csv(datafile,col_types = c(c,c,c,i,c))
urban <- read_csv(datafile,col_types = c(c,c,c,db1,c))
urban <- read_csv(datafile,col_types = c(c,c,c,d,c))
urban <- read_csv(datafile,col_types = c(c,c,c,c,c))
urban <- read_csv(datafile,col_types = c(c,c,c,?,c))
urban <- read_csv(datafile,col_types = c(c,c,c,n,c))
play()
head(urban)
str(urban)
nxt()
urban <- read_csv(datafile,col_types = c(c,c,c,d,c))
urban <- read_csv(datafile,col_types = c,c,c,d,c)
urban <- read_csv(datafile,col_types = list(c,c,c,d,c))
urban <- read_csv(datafile,col_types = list(c,c,c,double,c))
urban <- read_csv(datafile,col_types = list(col_character(),col_character(),col_character(),col_double(),col_character()))
urban <- read_csv(datafile,col_types = ccc)
urban <- read_csv(datafile,col_types = "cccdc")
urban <- read_csv(datafile,col_types = "cccd")
urban <- read_csv(datafile,col_types = "cccd-")
head(urban)
urban <- read_csv(datafile,col_types = "cccd-",100)
urban <- read_csv(datafile,col_types = "cccd-")
urban <- read_csv(datafile,col_types = "cccd-",n_max = 100)
main()
head(worldcup)
?dplyr
submit()
reset()
swirl()
submit()
submit()
submit()
reset()
swirl()
submit()
submit()
?%>%
subimt
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
worldcup %>%  select(Time,Passes,Tackles,Saves) %>% head
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
wc_1 <- worldcup %>%  select(Time,Passes,Tackles,Saves) %>% head
wc_1
bye()
swirl()
main()
submit()
submit()
submit()
wc_1
submit()
wc_!
wc_1
submit()
wc_1
?head.matrix
?subset
main()
bye()
swirl()
submit()
submit()
submit()
?gather
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
bye()
swirl()
x <- "Hello World!"
x
paste("Square", "Circle","Triangle")
paste("Square", "Circle","Triangle",seq= "+")
paste("Square", "Circle","Triangle",sep = "+")
paste0("Square", "Circle","Triangle")
shapes <- c("Square" ,"Circle" , "Triangle")
paste("My favorite shape is a", shapes)
paste(shapes, collapse = " ")
nchar("Count Me!")
cases <- c("CAPS","low","Title")
toupper
toupper(cases)
tolower(cases)
regular_expression <- regex(a)
regular_expression <- regexec(a)
regular_expression <- a
regular_expression <- 5
regular_expression <- "a"
string_to_search <- "Maryland"
grepl(regular_expression,string_to_search)
grepl("ryla", "Maryland")
grepl("Marly", "Maryland")
head(state.name)
grepl(".","Maryland")
grepl(".","")
grepl("a.b", c("aaa", "aab","abb", "acadb"))
grepl("a+","Maryland")
grepl("x+","Maryland")
grepl("x*","Maryland")
grepl("ss"{2},"Mississippi")
grepl("ss{2}","Mississippi")
grepl("s{2}","Mississippi")
grepl("s{2,3}","Mississippi")
grepl("i{2,3}","Mississippi")
grepl("(iss){2}","Mississippi")
grepl("\\d","0123456789")
grepl("\\D","0123456789")
grepl("-","rhythms")
grepl("[aeiou]","rhythms")
grepl("\\.","http://www.jhsph.edu")
grepl("\\.","http://www.jhsph.edu/")
grepl("^a", c("bab", "aab"))
grepl("$b", c("bab", "aab"))
grepl("b$", c("bab", "aab"))
grepl("a|b", c("abc", "bcd", "cde"))
start_end_vowel <- "^[AEIOU]{1}.+[aeiou}$"
start_end_vowel <- "^[AEIOU]{1}.+[aeiou]{1}$"
grepl
grepl(start_end_vowel,state.name)
vowel_state_lgl <- grepl(start_end_vowel,state.name)
?index
vowel_state_lgl*state.name
1+2
state.name[vowel_state_lgl]
grepl("[Ii]", c("Hawaii", "Illinois", "Kentucky"))
grep("[Ii]", c("Hawaii", "Illinois", "Kentucky"))
sub("[Ii]", "1", c("Hawaii", "Illinois", "Kentucky"))
gsub("[Ii]", "1", c("Hawaii", "Illinois", "Kentucky"))
two_s <- state.name[grep("ss",state.name)]
two_s
play()
grep("ss",state.name)
grep("s{2}",state.name)
state.name[c(21,24,25,42)]
grepl("ss",state.name)
a<-grepl("ss",state.name)
state.name[a]
nxt()
strplit(two_s,"ss")
strsplit(two_s,"ss")
str_extract("Camaro Z28", "[0-9]+")
str_order(c("p", "e", "n", "g"))
str_pad("Thai", width =8, side = "left", pad = "-")
str_to_title(c("CAPS", "low", "Title"))
str_trim(" trim me ")
word("See Spot run.", 2)
swirl::install_course("Regression Models")
swirl()
plot(child~parent,galton)
plot(jitter(child,4)~parent,galton)
regrline <- lm(child~parent,galton)
abline(regrline,lwd=3,co="red")
abline(regrline,lwd=3,co='red')
abline(regrline,lwd=3,col='red')
summary(regrline)
bye()
library("swirl")
swirl()
mian()
main()
lm(child~parent,galton)
fit <- lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
bye()
dev.off()
pdf("stockplots.pdf")
#mypart add loop at begining
for(i in 1:length(files)){
plotprice <- function(tickers, pricedata, normalize = FALSE, file_name = NA) {
# Order by date
pricedata <-
pricedata %>%
arrange(stock, date)
# Normalize?
if(normalize) {
pricedata <-
pricedata %>%
group_by(stock) %>%
summarize(first_day = head(close, n = 1)) %>%
full_join(pricedata) %>%
mutate(close = 100*close/first_day)
}
# Make data frame for ticker text
ticker_text <-
pricedata %>%
filter(stock %in% tickers) %>%
group_by(stock) %>%
summarize(x = tail(date, n = 1),
y = tail(close, n = 1))
# Make plot
p <- pricedata %>%
filter(stock %in% tickers) %>%
ggplot(aes(x = date, y = close, group = stock)) +
labs(title=paste("AAPL vs",files_name[i], sep = ""))+
##mypart add a title
geom_line() +
geom_text(aes(x = x, y = y, label = stock),
data = ticker_text,
hjust = -.3) +
xlab("") +
ylab("") +
theme_bw() +
scale_x_date(expand = c(.14, 0))
if(!is.na(file_name)) {
ggsave(filename = file_name, p)
}
return(p)
}
# mypart still loop and print
f<- plotprice(tickers = c("AAPL", files_name[i]),
pricedata = stockprices,
normalize = TRUE,
file_name = NA)
print(f)
}
dev.off()
x <- c(1)
y <- c("HELLO WORLD")
ls()
?ls
library(dplyr)
head(bnc.freq)
head(earning.calls.freq)
str(bnc.freq)
str(earning.calls.freq)
total <-
right_join(bnc.freq,earning.calls.freq,c("word" = "word"))%>%
rename_at("Freq.x",~"bnc")%>%
rename_at("Freq.y",~"earning.calls")
head(total)
Sys.setlocale("LC_ALL", "C")
ipo.text %>%
VectorSource() %>%
Corpus() %>%
TermDocumentMatrix(control = list(removePunctuation=T,
tolower=T,
stopwords = T,
removeNumbers = T,
wordLengths = c(3,20),
stemming = T,
bounds = list(global = c(2,60)))) %>%
as.matrix() -> tdm
require(dplyr)
require(FactoMineR)
require(tm)
Sys.setlocale("LC_ALL", "C")
ipo.text %>%
VectorSource() %>%
Corpus() %>%
TermDocumentMatrix(control = list(removePunctuation=T,
tolower=T,
stopwords = T,
removeNumbers = T,
wordLengths = c(3,20),
stemming = T,
bounds = list(global = c(2,60)))) %>%
as.matrix() -> tdm
require(dplyr)
require(FactoMineR)
require(tm)
load("ipo.data.Rdata")
Sys.setlocale("LC_ALL", "C")
ipo.text %>%
VectorSource() %>%
Corpus() %>%
TermDocumentMatrix(control = list(removePunctuation=T,
tolower=T,
stopwords = T,
removeNumbers = T,
wordLengths = c(3,20),
stemming = T,
bounds = list(global = c(2,60)))) %>%
as.matrix() -> tdm
load("ipo.data.Rdata")
require(dplyr)
require(FactoMineR)
require(tm)
x<- rnorm(100)
x<- rnorm(100)
y <- rnorm(100)
setwd("C:/Users/windy/Desktop/NHH-BA/R/data science/git_lesson")
